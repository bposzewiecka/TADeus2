# Generated by Django 2.0.3 on 2021-04-23 20:42

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Assembly',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='BedFileEntry',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('chrom', models.CharField(max_length=50)),
                ('start', models.IntegerField()),
                ('end', models.IntegerField()),
                ('labels', models.BooleanField(default=False)),
                ('strand', models.CharField(choices=[('+', '+'), ('-', '-'), ('.', '.')], max_length=1, null=True)),
                ('name', models.CharField(max_length=100, null=True)),
                ('score', models.FloatField(null=True)),
                ('thick_start', models.IntegerField(null=True)),
                ('thick_end', models.IntegerField(null=True)),
                ('itemRGB', models.CharField(max_length=6, null=True)),
                ('block_count', models.IntegerField(null=True)),
                ('block_sizes', models.CharField(max_length=400, null=True)),
                ('block_starts', models.CharField(max_length=400, null=True)),
                ('ensembl_gene_id', models.CharField(max_length=20, null=True)),
                ('biotype', models.CharField(max_length=20)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Breakpoint',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('left_coord', models.IntegerField()),
                ('left_inverse', models.BooleanField(default=False)),
                ('right_coord', models.IntegerField()),
                ('right_inverse', models.BooleanField(default=False)),
                ('public', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='Chromosome',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
                ('size', models.IntegerField()),
                ('assembly', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='chromosomes', to='tadeus.Assembly')),
            ],
        ),
        migrations.CreateModel(
            name='Eval',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=400)),
                ('auth_cookie', models.CharField(max_length=60, null=True)),
                ('assembly', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='tadeus.Assembly')),
                ('owner', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='GeneToPhenotype',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('frequent', models.BooleanField(default=False)),
            ],
            options={
                'ordering': ['gene'],
            },
        ),
        migrations.CreateModel(
            name='Phenotype',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('db', models.CharField(max_length=10)),
                ('pheno_id', models.CharField(max_length=20)),
                ('name', models.CharField(max_length=200)),
                ('definition', models.CharField(max_length=1000, null=True)),
                ('comment', models.CharField(max_length=2000, null=True)),
                ('is_a', models.ManyToManyField(to='tadeus.Phenotype')),
            ],
        ),
        migrations.CreateModel(
            name='Plot',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('public', models.BooleanField(default=False)),
                ('approved', models.BooleanField(default=False)),
                ('title', models.CharField(max_length=400)),
                ('name', models.CharField(max_length=400)),
                ('auth_cookie', models.CharField(max_length=60, null=True)),
                ('assembly', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='tadeus.Assembly')),
                ('owner', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Sample',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('description', models.CharField(max_length=1000)),
            ],
        ),
        migrations.CreateModel(
            name='Species',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Track',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('no', models.IntegerField()),
                ('column', models.IntegerField(default=1)),
                ('title', models.CharField(blank=True, max_length=100, null=True)),
                ('bed_print_options', models.CharField(choices=[('B', 'Tiles'), ('V', 'Vertical Lines'), ('A', 'Tiles and Vertical Lines')], default='B', max_length=1)),
                ('height', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MaxValueValidator(20), django.core.validators.MinValueValidator(1)])),
                ('inverted', models.BooleanField(default=False)),
                ('color', models.CharField(default='1F78B4', max_length=6)),
                ('edgecolor', models.CharField(default='EEEEEE', max_length=6)),
                ('colormap', models.CharField(blank=True, choices=[('Accent', 'Accent'), ('Accent_r', 'Accent_r'), ('Blues', 'Blues'), ('Blues_r', 'Blues_r'), ('BrBG', 'BrBG'), ('BrBG_r', 'BrBG_r'), ('BuGn', 'BuGn'), ('BuGn_r', 'BuGn_r'), ('BuPu', 'BuPu'), ('BuPu_r', 'BuPu_r'), ('CMRmap', 'CMRmap'), ('CMRmap_r', 'CMRmap_r'), ('Dark2', 'Dark2'), ('Dark2_r', 'Dark2_r'), ('GnBu', 'GnBu'), ('GnBu_r', 'GnBu_r'), ('Greens', 'Greens'), ('Greens_r', 'Greens_r'), ('Greys', 'Greys'), ('Greys_r', 'Greys_r'), ('OrRd', 'OrRd'), ('OrRd_r', 'OrRd_r'), ('Oranges', 'Oranges'), ('Oranges_r', 'Oranges_r'), ('PRGn', 'PRGn'), ('PRGn_r', 'PRGn_r'), ('Paired', 'Paired'), ('Paired_r', 'Paired_r'), ('Pastel1', 'Pastel1'), ('Pastel1_r', 'Pastel1_r'), ('Pastel2', 'Pastel2'), ('Pastel2_r', 'Pastel2_r'), ('PiYG', 'PiYG'), ('PiYG_r', 'PiYG_r'), ('PuBu', 'PuBu'), ('PuBuGn', 'PuBuGn'), ('PuBuGn_r', 'PuBuGn_r'), ('PuBu_r', 'PuBu_r'), ('PuOr', 'PuOr'), ('PuOr_r', 'PuOr_r'), ('PuRd', 'PuRd'), ('PuRd_r', 'PuRd_r'), ('Purples', 'Purples'), ('Purples_r', 'Purples_r'), ('RdBu', 'RdBu'), ('RdBu_r', 'RdBu_r'), ('RdGy', 'RdGy'), ('RdGy_r', 'RdGy_r'), ('RdPu', 'RdPu'), ('RdPu_r', 'RdPu_r'), ('RdYlBu', 'RdYlBu'), ('RdYlBu_r', 'RdYlBu_r'), ('RdYlGn', 'RdYlGn'), ('RdYlGn_r', 'RdYlGn_r'), ('Reds', 'Reds'), ('Reds_r', 'Reds_r'), ('Set1', 'Set1'), ('Set1_r', 'Set1_r'), ('Set2', 'Set2'), ('Set2_r', 'Set2_r'), ('Set3', 'Set3'), ('Set3_r', 'Set3_r'), ('Spectral', 'Spectral'), ('Spectral_r', 'Spectral_r'), ('Wistia', 'Wistia'), ('Wistia_r', 'Wistia_r'), ('YlGn', 'YlGn'), ('YlGnBu', 'YlGnBu'), ('YlGnBu_r', 'YlGnBu_r'), ('YlGn_r', 'YlGn_r'), ('YlOrBr', 'YlOrBr'), ('YlOrBr_r', 'YlOrBr_r'), ('YlOrRd', 'YlOrRd'), ('YlOrRd_r', 'YlOrRd_r'), ('afmhot', 'afmhot'), ('afmhot_r', 'afmhot_r'), ('autumn', 'autumn'), ('autumn_r', 'autumn_r'), ('binary', 'binary'), ('binary_r', 'binary_r'), ('bone', 'bone'), ('bone_r', 'bone_r'), ('brg', 'brg'), ('brg_r', 'brg_r'), ('bwr', 'bwr'), ('bwr_r', 'bwr_r'), ('cividis', 'cividis'), ('cividis_r', 'cividis_r'), ('cool', 'cool'), ('cool_r', 'cool_r'), ('coolwarm', 'coolwarm'), ('coolwarm_r', 'coolwarm_r'), ('copper', 'copper'), ('copper_r', 'copper_r'), ('cubehelix', 'cubehelix'), ('cubehelix_r', 'cubehelix_r'), ('flag', 'flag'), ('flag_r', 'flag_r'), ('gist_earth', 'gist_earth'), ('gist_earth_r', 'gist_earth_r'), ('gist_gray', 'gist_gray'), ('gist_gray_r', 'gist_gray_r'), ('gist_heat', 'gist_heat'), ('gist_heat_r', 'gist_heat_r'), ('gist_ncar', 'gist_ncar'), ('gist_ncar_r', 'gist_ncar_r'), ('gist_rainbow', 'gist_rainbow'), ('gist_rainbow_r', 'gist_rainbow_r'), ('gist_stern', 'gist_stern'), ('gist_stern_r', 'gist_stern_r'), ('gist_yarg', 'gist_yarg'), ('gist_yarg_r', 'gist_yarg_r'), ('gnuplot', 'gnuplot'), ('gnuplot2', 'gnuplot2'), ('gnuplot2_r', 'gnuplot2_r'), ('gnuplot_r', 'gnuplot_r'), ('gray', 'gray'), ('gray_r', 'gray_r'), ('hot', 'hot'), ('hot_r', 'hot_r'), ('hsv', 'hsv'), ('hsv_r', 'hsv_r'), ('inferno', 'inferno'), ('inferno_r', 'inferno_r'), ('jet', 'jet'), ('jet_r', 'jet_r'), ('magma', 'magma'), ('magma_r', 'magma_r'), ('nipy_spectral', 'nipy_spectral'), ('nipy_spectral_r', 'nipy_spectral_r'), ('ocean', 'ocean'), ('ocean_r', 'ocean_r'), ('pink', 'pink'), ('pink_r', 'pink_r'), ('plasma', 'plasma'), ('plasma_r', 'plasma_r'), ('prism', 'prism'), ('prism_r', 'prism_r'), ('rainbow', 'rainbow'), ('rainbow_r', 'rainbow_r'), ('seismic', 'seismic'), ('seismic_r', 'seismic_r'), ('spring', 'spring'), ('spring_r', 'spring_r'), ('summer', 'summer'), ('summer_r', 'summer_r'), ('tab10', 'tab10'), ('tab10_r', 'tab10_r'), ('tab20', 'tab20'), ('tab20_r', 'tab20_r'), ('tab20b', 'tab20b'), ('tab20b_r', 'tab20b_r'), ('tab20c', 'tab20c'), ('tab20c_r', 'tab20c_r'), ('terrain', 'terrain'), ('terrain_r', 'terrain_r'), ('viridis', 'viridis'), ('viridis_r', 'viridis_r'), ('winter', 'winter'), ('winter_r', 'winter_r')], default='RdYlBu_r', max_length=15, null=True)),
                ('min_value', models.FloatField(blank=True, null=True)),
                ('max_value', models.FloatField(blank=True, null=True)),
                ('transform', models.CharField(choices=[('none', 'none'), ('log1p', 'log1p'), ('log', 'log'), ('-log', '-log')], default='log1p', max_length=5)),
                ('show_data_range', models.BooleanField(default=True)),
                ('bedgraph_style', models.CharField(choices=[('L', 'Line'), ('LB', 'Line with borders'), ('A', 'Area'), ('AB', 'Area with borders')], default='L', max_length=2)),
                ('style', models.CharField(choices=[('tiles', 'Tiles'), ('introns', 'With introns'), ('flybase', 'Flybase'), ('domains', 'Domains'), ('arcs', 'Arcs')], default='tiles', max_length=7)),
                ('display', models.CharField(choices=[('stacked', 'Stacked'), ('collapsed', 'Collapsed'), ('interlaced', 'Interlaced')], default='stacked', max_length=10)),
                ('labels', models.BooleanField(default=True)),
                ('x_labels', models.BooleanField(default=True)),
                ('name_filter', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='TrackFile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('source_name', models.CharField(blank=True, max_length=200, null=True)),
                ('source_url', models.URLField(blank=True, max_length=2000, null=True)),
                ('file_type', models.CharField(choices=[('BE', 'Bed'), ('BG', 'BedGraph'), ('BM', 'BedGraphMatrix'), ('HI', 'HiCMatrix'), ('XA', 'XAxis')], max_length=2)),
                ('public', models.BooleanField(default=False)),
                ('approved', models.BooleanField(default=False)),
                ('reference', models.CharField(blank=True, max_length=500, null=True)),
                ('file_path', models.CharField(max_length=500, null=True)),
                ('bin_sizes', models.CharField(max_length=500, null=True)),
                ('auth_cookie', models.CharField(max_length=60, null=True)),
                ('file_sub_type', models.CharField(choices=[('Bed3', 'Bed3'), ('Bed6', 'Bed6'), ('Bed9', 'Bed9'), ('Bed12', 'Bed12')], max_length=5, null=True)),
                ('assembly', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='tadeus.Assembly')),
                ('owner', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
                ('sample', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to='tadeus.Sample')),
            ],
        ),
        migrations.CreateModel(
            name='Gene',
            fields=[
                ('bedfileentry_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='tadeus.BedFileEntry')),
            ],
            options={
                'abstract': False,
            },
            bases=('tadeus.bedfileentry',),
        ),
        migrations.AddField(
            model_name='track',
            name='domains_file',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='domains_file_tracks', to='tadeus.TrackFile'),
        ),
        migrations.AddField(
            model_name='track',
            name='plot',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tracks', to='tadeus.Plot'),
        ),
        migrations.AddField(
            model_name='track',
            name='track_file',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='tadeus.TrackFile'),
        ),
        migrations.AddField(
            model_name='sample',
            name='species',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='tadeus.Species'),
        ),
        migrations.AddField(
            model_name='genetophenotype',
            name='phenotype',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tadeus.Phenotype'),
        ),
        migrations.AddField(
            model_name='eval',
            name='plot',
            field=models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, related_name='eval', to='tadeus.Plot'),
        ),
        migrations.AddField(
            model_name='eval',
            name='track_file',
            field=models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, related_name='eval', to='tadeus.TrackFile'),
        ),
        migrations.AddField(
            model_name='breakpoint',
            name='left_chrom',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, related_name='left_chrom', to='tadeus.Chromosome'),
        ),
        migrations.AddField(
            model_name='breakpoint',
            name='owner',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='breakpoint',
            name='right_chrom',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, related_name='right_chrom', to='tadeus.Chromosome'),
        ),
        migrations.AddField(
            model_name='breakpoint',
            name='sample',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to='tadeus.Sample'),
        ),
        migrations.AddField(
            model_name='bedfileentry',
            name='track_file',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='file_entries', to='tadeus.TrackFile'),
        ),
        migrations.AddField(
            model_name='assembly',
            name='species',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='tadeus.Species'),
        ),
        migrations.AddField(
            model_name='phenotype',
            name='genes',
            field=models.ManyToManyField(related_name='phenotypes', through='tadeus.GeneToPhenotype', to='tadeus.Gene'),
        ),
        migrations.AddField(
            model_name='genetophenotype',
            name='gene',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tadeus.Gene'),
        ),
        migrations.AlterUniqueTogether(
            name='chromosome',
            unique_together={('assembly', 'name')},
        ),
    ]
